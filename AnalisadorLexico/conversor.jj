
options {
  STATIC = false;
}

PARSER_BEGIN(Conversor)


public class Conversor {

    final static String Version = "0.0.1";

    public static void main(String args[]) throws ParseException, TokenMgrError {
        Conversor interpreter = new Conversor(System.in);
        interpreter.Start();
    }
}

PARSER_END(Conversor)

SKIP: { " " | "\t" | "\r" }

SKIP: {
    "/*": multilinecomment
}

<multilinecomment> SKIP: {
    "*/": DEFAULT | <~[]>
}

TOKEN: {
    <NUMBER: <DIGITS>"-"<BASE>
           //| <LETTERS>
           //| <DIGITS> <LETTERS>
           //| <LETTERS> <DIGITS>
           //| <DIGITS> <BASE>
    >
}

TOKEN: {
    < DIGITS: (["0" - "9"])+ >
}

TOKEN : {
    < LETTERS: (["A" - "F"])+ >
}

TOKEN : {
    <BASE: "B" | "b" |
           "O" | "o" |
           "H" | "h"
    >
}

TOKEN: {
    < EOL: "\n" | "\r" | "\r\n" >
}

void Start() :
{
    Token t;
    String entrada = "0";
    String valor = "0";
}
{
    (
        t = <NUMBER>
        {
            entrada = t.image;
        }
        valor = Conversor(entrada)
        <EOL>
        {
            System.out.println(valor);
        }
    )*

    <EOF>
}

String Conversor(String entradaTerminal) :
{
    String valor;
}
{
    {
        String separaEntrada [] = entradaTerminal.split("-");
        String entradaString = separaEntrada[0];
        String base = separaEntrada[1];
        if(base.equals("B") || base.equals("b")) {
            valor = ConversorBinario(entradaString);
        }
        else if (base.equals("O") || base.equals("o")) {
            valor = ConversorOctal(entradaString);
        }
        else if (base.equals("H") || base.equals("h")) {
            valor = ConversorHexa(entradaString);
        }
        else {
            valor = "0";
        }
    }
    {
        return valor;
    }

}


String ConversorBinario (String entradaString) :
{
    String accumulador;
}
{
    {
        int entrada = Integer.parseInt(entradaString);
        int cont = 0;
        int base = 2;
        java.util.List<Integer> restos = new java.util.ArrayList<Integer>();
        while(entrada >= base) {
            restos.add(entrada%base);
            entrada = entrada/base;
            cont++;
        }
        String resposta = String.valueOf(entrada);
        for (int i = restos.size()-1; i >= 0; i--) {
            resposta += String.valueOf(restos.get(i));
        }
        accumulador = resposta;
    }

    {
        return accumulador;
    }
}

String ConversorOctal (String entradaString) :
{
    String accumulador;
}
{
    {
        int entrada = Integer.parseInt(entradaString);
        int cont = 0;
        int base = 8;
        java.util.List<Integer> restos = new java.util.ArrayList<Integer>();
        while(entrada >= base) {
            restos.add(entrada%base);
            entrada = entrada/base;
            cont++;
        }
        String resposta = String.valueOf(entrada);
        for (int i = restos.size()-1; i >= 0; i--) {
            resposta += String.valueOf(restos.get(i));
        }
        accumulador = resposta;
    }

    {
        return accumulador;
    }
}

String ConversorHexa (String entradaString) :
{
    String accumulador;
}
{
    {
        int entrada = Integer.parseInt(entradaString);
        int base = 16;
        java.util.List<String> restos = new java.util.ArrayList<String>();
        while(entrada >= base) {
            int resto = entrada%base;
            if (resto > 9) {
                restos.add(RetornaLetraHexa(resto));
            }
            else {
                restos.add(String.valueOf(resto));
            }
            entrada = entrada/base;
        }
        String resposta = "";
        if(entrada > 9) {
            resposta = RetornaLetraHexa(entrada);
        }
        else {
            resposta = String.valueOf(entrada);
        }
        for (int i = restos.size()-1; i >= 0; i--) {
            resposta += restos.get(i);
        }
        accumulador = resposta;
    }
    {
        return accumulador;
    }
}

String RetornaLetraHexa (int numero) :
{
    Token t;
}
{
    {
        String letra = "";
        switch (numero) {
            case 10: letra = "A"; break;
            case 11: letra = "B"; break;
            case 12: letra = "C"; break;
            case 13: letra = "D"; break;
            case 14: letra = "E"; break;
            case 15: letra = "F"; break;
        }
        return letra;
    }
}